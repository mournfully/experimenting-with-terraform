{
  "version": 4,
  "terraform_version": "1.3.2",
  "serial": 470,
  "lineage": "60dc5857-b531-2522-acfb-b5a186acda09",
  "outputs": {},
  "resources": [
    {
      "module": "module.loadbalancer_1",
      "mode": "data",
      "type": "template_file",
      "name": "data_cloudinit",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "ca4c34a6cb61a25d43ceffaf73ced7f2ca682c592f9db90940ee0d2363d9e642",
            "rendered": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run Load Balancing server for testing\nruncmd:\n  - |\n    cd \"/home/local/\"\n    git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n    cd \"PiCalcPy\"\n    python \"install_picalc.py\" \"lb\"\n    cd \"PumpkinLB-2.0.0\"\n    echo \"[options]\\nbuffer_size=4096\\n\\n[mappings]\\n80=192.168.180.3:8080,192.168.180.4:8080\" \u003e lb_config.cf\n    python \"PumpkinLB.py\" \"/home/local/PiCalcPy/PumpkinLB-2.0.0/lb_config.cf\" \u0026",
            "template": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run Load Balancing server for testing\nruncmd:\n  - |\n    cd \"/home/local/\"\n    git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n    cd \"PiCalcPy\"\n    python \"install_picalc.py\" \"lb\"\n    cd \"PumpkinLB-2.0.0\"\n    echo \"[options]\\nbuffer_size=4096\\n\\n[mappings]\\n80=192.168.180.3:8080,192.168.180.4:8080\" \u003e lb_config.cf\n    python \"PumpkinLB.py\" \"/home/local/PiCalcPy/PumpkinLB-2.0.0/lb_config.cf\" \u0026",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.loadbalancer_1",
      "mode": "managed",
      "type": "libvirt_cloudinit_disk",
      "name": "resource_disk",
      "provider": "module.loadbalancer_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "/libvirt-images/loadbalancer_1_pool/commoninit.iso;a0280a24-fd60-4bd2-bcb4-a4db9d08cd06",
            "meta_data": "",
            "name": "commoninit.iso",
            "network_config": "",
            "pool": "loadbalancer_1_pool",
            "user_data": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run Load Balancing server for testing\nruncmd:\n  - |\n    cd \"/home/local/\"\n    git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n    cd \"PiCalcPy\"\n    python \"install_picalc.py\" \"lb\"\n    cd \"PumpkinLB-2.0.0\"\n    echo \"[options]\\nbuffer_size=4096\\n\\n[mappings]\\n80=192.168.180.3:8080,192.168.180.4:8080\" \u003e lb_config.cf\n    python \"PumpkinLB.py\" \"/home/local/PiCalcPy/PumpkinLB-2.0.0/lb_config.cf\" \u0026"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.loadbalancer_1.data.template_file.data_cloudinit",
            "module.loadbalancer_1.libvirt_pool.resource_pool"
          ]
        }
      ]
    },
    {
      "module": "module.loadbalancer_1",
      "mode": "managed",
      "type": "libvirt_domain",
      "name": "resource_domain",
      "provider": "module.loadbalancer_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arch": "x86_64",
            "autostart": null,
            "boot_device": [],
            "cloudinit": "/libvirt-images/loadbalancer_1_pool/commoninit.iso;a0280a24-fd60-4bd2-bcb4-a4db9d08cd06",
            "cmdline": null,
            "console": [
              {
                "source_host": "127.0.0.1",
                "source_path": "",
                "source_service": "0",
                "target_port": "0",
                "target_type": "serial",
                "type": "pty"
              }
            ],
            "coreos_ignition": null,
            "cpu": [],
            "description": "",
            "disk": [
              {
                "block_device": "",
                "file": "",
                "scsi": false,
                "url": "",
                "volume_id": "/libvirt-images/loadbalancer_1_pool/loadbalancer_1_image.qcow2",
                "wwn": ""
              }
            ],
            "emulator": "/usr/bin/qemu-system-x86_64",
            "filesystem": [],
            "firmware": "",
            "fw_cfg_name": "opt/com.coreos/config",
            "graphics": [
              {
                "autoport": true,
                "listen_address": "127.0.0.1",
                "listen_type": "address",
                "type": "spice",
                "websocket": 0
              }
            ],
            "id": "a92bb6e9-8c1d-490c-91ea-b2b6b794a9f5",
            "initrd": "",
            "kernel": "",
            "machine": "pc",
            "memory": 1024,
            "metadata": null,
            "name": "loadbalancer_1_domain",
            "network_interface": [
              {
                "addresses": [],
                "bridge": "",
                "hostname": "",
                "mac": "52:54:00:6C:3C:02",
                "macvtap": "",
                "network_id": "099dcc7e-822e-440f-9e8a-d7c4902d7e1b",
                "network_name": "network_1",
                "passthrough": "",
                "vepa": "",
                "wait_for_lease": false
              }
            ],
            "nvram": [],
            "qemu_agent": false,
            "running": true,
            "timeouts": null,
            "tpm": [],
            "vcpu": 1,
            "video": [],
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.loadbalancer_1.data.template_file.data_cloudinit",
            "module.loadbalancer_1.libvirt_cloudinit_disk.resource_disk",
            "module.loadbalancer_1.libvirt_pool.resource_pool",
            "module.loadbalancer_1.libvirt_volume.resource_image"
          ]
        }
      ]
    },
    {
      "module": "module.loadbalancer_1",
      "mode": "managed",
      "type": "libvirt_pool",
      "name": "resource_pool",
      "provider": "module.loadbalancer_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation": 24601620480,
            "available": null,
            "capacity": 88387616768,
            "id": "1d3a33a5-03d7-489e-b706-8377692c1ae2",
            "name": "loadbalancer_1_pool",
            "path": "/libvirt-images/loadbalancer_1_pool",
            "type": "dir",
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.loadbalancer_1",
      "mode": "managed",
      "type": "libvirt_volume",
      "name": "resource_image",
      "provider": "module.loadbalancer_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base_volume_id": null,
            "base_volume_name": null,
            "base_volume_pool": null,
            "format": "qcow2",
            "id": "/libvirt-images/loadbalancer_1_pool/loadbalancer_1_image.qcow2",
            "name": "loadbalancer_1_image.qcow2",
            "pool": "loadbalancer_1_pool",
            "size": 2147483648,
            "source": "modules/virtual-machine/../../downloads/debian-11-generic-amd64-20220911-1135.qcow2",
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.loadbalancer_1.libvirt_pool.resource_pool"
          ]
        }
      ]
    },
    {
      "module": "module.network_1",
      "mode": "managed",
      "type": "null_resource",
      "name": "resource_network",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1591291744489660669",
            "triggers": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.node_1",
      "mode": "data",
      "type": "template_file",
      "name": "data_cloudinit",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "80d3355d07e40670be32c17386be8102875777bcbb800cf543f2fd5bf03f49aa",
            "rendered": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run PiCalc server for testing\nruncmd:\n  - cd \"/home/local/\"\n  - git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n  - cd \"PiCalcPy\"\n  - sed -i -e \"/^hostname = socket.gethostname()/s/^.*$/s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)/\" \"picalc_server.py\"\n  - sed -i -e \"/ip_addr = socket.gethostbyname(hostname)/a ip_addr = s.getsockname()[0]\" \"picalc_server.py\"\n  - sed -i -e \"/^ip_addr = socket.gethostbyname(hostname)/s/^.*$/s.connect(('8.8.8.8', 80))/\" \"picalc_server.py\"\n  - python \"install_picalc.py\"\n  - python run.py \"mode=server\" \u0026",
            "template": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run PiCalc server for testing\nruncmd:\n  - cd \"/home/local/\"\n  - git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n  - cd \"PiCalcPy\"\n  - sed -i -e \"/^hostname = socket.gethostname()/s/^.*$/s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)/\" \"picalc_server.py\"\n  - sed -i -e \"/ip_addr = socket.gethostbyname(hostname)/a ip_addr = s.getsockname()[0]\" \"picalc_server.py\"\n  - sed -i -e \"/^ip_addr = socket.gethostbyname(hostname)/s/^.*$/s.connect(('8.8.8.8', 80))/\" \"picalc_server.py\"\n  - python \"install_picalc.py\"\n  - python run.py \"mode=server\" \u0026",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.node_1",
      "mode": "managed",
      "type": "libvirt_cloudinit_disk",
      "name": "resource_disk",
      "provider": "module.node_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "/libvirt-images/node_1_pool/commoninit.iso;143190c9-8b45-49fe-9b83-56d98a42870b",
            "meta_data": "",
            "name": "commoninit.iso",
            "network_config": "",
            "pool": "node_1_pool",
            "user_data": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run PiCalc server for testing\nruncmd:\n  - cd \"/home/local/\"\n  - git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n  - cd \"PiCalcPy\"\n  - sed -i -e \"/^hostname = socket.gethostname()/s/^.*$/s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)/\" \"picalc_server.py\"\n  - sed -i -e \"/ip_addr = socket.gethostbyname(hostname)/a ip_addr = s.getsockname()[0]\" \"picalc_server.py\"\n  - sed -i -e \"/^ip_addr = socket.gethostbyname(hostname)/s/^.*$/s.connect(('8.8.8.8', 80))/\" \"picalc_server.py\"\n  - python \"install_picalc.py\"\n  - python run.py \"mode=server\" \u0026"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.node_1.data.template_file.data_cloudinit",
            "module.node_1.libvirt_pool.resource_pool"
          ]
        }
      ]
    },
    {
      "module": "module.node_1",
      "mode": "managed",
      "type": "libvirt_domain",
      "name": "resource_domain",
      "provider": "module.node_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arch": "x86_64",
            "autostart": null,
            "boot_device": [],
            "cloudinit": "/libvirt-images/node_1_pool/commoninit.iso;143190c9-8b45-49fe-9b83-56d98a42870b",
            "cmdline": null,
            "console": [
              {
                "source_host": "127.0.0.1",
                "source_path": "",
                "source_service": "0",
                "target_port": "0",
                "target_type": "serial",
                "type": "pty"
              }
            ],
            "coreos_ignition": null,
            "cpu": [],
            "description": "",
            "disk": [
              {
                "block_device": "",
                "file": "",
                "scsi": false,
                "url": "",
                "volume_id": "/libvirt-images/node_1_pool/node_1_image.qcow2",
                "wwn": ""
              }
            ],
            "emulator": "/usr/bin/qemu-system-x86_64",
            "filesystem": [],
            "firmware": "",
            "fw_cfg_name": "opt/com.coreos/config",
            "graphics": [
              {
                "autoport": true,
                "listen_address": "127.0.0.1",
                "listen_type": "address",
                "type": "spice",
                "websocket": 0
              }
            ],
            "id": "a6231fec-fe48-44cf-8fe2-d6628fe571c7",
            "initrd": "",
            "kernel": "",
            "machine": "pc",
            "memory": 1024,
            "metadata": null,
            "name": "node_1_domain",
            "network_interface": [
              {
                "addresses": [],
                "bridge": "",
                "hostname": "",
                "mac": "52:54:00:6C:3C:03",
                "macvtap": "",
                "network_id": "099dcc7e-822e-440f-9e8a-d7c4902d7e1b",
                "network_name": "network_1",
                "passthrough": "",
                "vepa": "",
                "wait_for_lease": false
              }
            ],
            "nvram": [],
            "qemu_agent": false,
            "running": true,
            "timeouts": null,
            "tpm": [],
            "vcpu": 1,
            "video": [],
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.node_1.data.template_file.data_cloudinit",
            "module.node_1.libvirt_cloudinit_disk.resource_disk",
            "module.node_1.libvirt_pool.resource_pool",
            "module.node_1.libvirt_volume.resource_image"
          ]
        }
      ]
    },
    {
      "module": "module.node_1",
      "mode": "managed",
      "type": "libvirt_pool",
      "name": "resource_pool",
      "provider": "module.node_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation": 24601620480,
            "available": null,
            "capacity": 88387616768,
            "id": "3b304ec5-3cb2-4e28-a506-727052521119",
            "name": "node_1_pool",
            "path": "/libvirt-images/node_1_pool",
            "type": "dir",
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.node_1",
      "mode": "managed",
      "type": "libvirt_volume",
      "name": "resource_image",
      "provider": "module.node_1.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base_volume_id": null,
            "base_volume_name": null,
            "base_volume_pool": null,
            "format": "qcow2",
            "id": "/libvirt-images/node_1_pool/node_1_image.qcow2",
            "name": "node_1_image.qcow2",
            "pool": "node_1_pool",
            "size": 2147483648,
            "source": "modules/virtual-machine/../../downloads/debian-11-generic-amd64-20220911-1135.qcow2",
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.node_1.libvirt_pool.resource_pool"
          ]
        }
      ]
    },
    {
      "module": "module.node_2",
      "mode": "data",
      "type": "template_file",
      "name": "data_cloudinit",
      "provider": "provider[\"registry.terraform.io/hashicorp/template\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "filename": null,
            "id": "80d3355d07e40670be32c17386be8102875777bcbb800cf543f2fd5bf03f49aa",
            "rendered": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run PiCalc server for testing\nruncmd:\n  - cd \"/home/local/\"\n  - git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n  - cd \"PiCalcPy\"\n  - sed -i -e \"/^hostname = socket.gethostname()/s/^.*$/s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)/\" \"picalc_server.py\"\n  - sed -i -e \"/ip_addr = socket.gethostbyname(hostname)/a ip_addr = s.getsockname()[0]\" \"picalc_server.py\"\n  - sed -i -e \"/^ip_addr = socket.gethostbyname(hostname)/s/^.*$/s.connect(('8.8.8.8', 80))/\" \"picalc_server.py\"\n  - python \"install_picalc.py\"\n  - python run.py \"mode=server\" \u0026",
            "template": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run PiCalc server for testing\nruncmd:\n  - cd \"/home/local/\"\n  - git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n  - cd \"PiCalcPy\"\n  - sed -i -e \"/^hostname = socket.gethostname()/s/^.*$/s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)/\" \"picalc_server.py\"\n  - sed -i -e \"/ip_addr = socket.gethostbyname(hostname)/a ip_addr = s.getsockname()[0]\" \"picalc_server.py\"\n  - sed -i -e \"/^ip_addr = socket.gethostbyname(hostname)/s/^.*$/s.connect(('8.8.8.8', 80))/\" \"picalc_server.py\"\n  - python \"install_picalc.py\"\n  - python run.py \"mode=server\" \u0026",
            "vars": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.node_2",
      "mode": "managed",
      "type": "libvirt_cloudinit_disk",
      "name": "resource_disk",
      "provider": "module.node_2.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "/libvirt-images/node_2_pool/commoninit.iso;160b2b9f-98df-4563-b909-af808edd50b7",
            "meta_data": "",
            "name": "commoninit.iso",
            "network_config": "",
            "pool": "node_2_pool",
            "user_data": "#cloud-config\n\n# https://www.digitalocean.com/community/tutorials/how-to-use-cloud-config-for-your-initial-server-setup\n# https://www.digitalocean.com/community/tutorials/an-introduction-to-cloud-config-scripting\n# https://github.com/number5/cloud-init/blob/main/doc/examples/cloud-config.txt\n# https://cloudinit.readthedocs.io/en/latest/topics/debugging.html\n\n# Create a new user\n# Set no password for the new user account\n# Set up SSH access for the new user account\n# Give the new user password-less sudo privileges to make administrative changes\n# Set no password and provide no SSH keys for the root account \nusers:\n  - name: local\n    ssh_authorized_keys:\n      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIPXej5WJD2eRn4zjkacmTysTdUXlW25kIV/svu/zv4Il minuramolligoda.dev@gmail.com\n    sudo: ALL=(ALL) NOPASSWD:ALL\n    groups: sudo\n    shell: /bin/bash\n    \n# Restrict root SSH login\n# Explicitly permit our new user\n# Restart ssh to apply changes\nruncmd:\n  - sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config\n  - sed -i -e '$aAllowUsers local' /etc/ssh/sshd_config\n  - restart ssh\n\n# Update \u0026\u0026 uprade packages\n# Install the following packages\npackage_update: false\npackage_upgrade: false\npackages:\n  - qemu-guest-agent\n  - git\n  - python\n  - wget\n\n#  Setup and run PiCalc server for testing\nruncmd:\n  - cd \"/home/local/\"\n  - git clone \"https://github.com/krebsalad/PiCalcPy.git\"\n  - cd \"PiCalcPy\"\n  - sed -i -e \"/^hostname = socket.gethostname()/s/^.*$/s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)/\" \"picalc_server.py\"\n  - sed -i -e \"/ip_addr = socket.gethostbyname(hostname)/a ip_addr = s.getsockname()[0]\" \"picalc_server.py\"\n  - sed -i -e \"/^ip_addr = socket.gethostbyname(hostname)/s/^.*$/s.connect(('8.8.8.8', 80))/\" \"picalc_server.py\"\n  - python \"install_picalc.py\"\n  - python run.py \"mode=server\" \u0026"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.node_2.data.template_file.data_cloudinit",
            "module.node_2.libvirt_pool.resource_pool"
          ]
        }
      ]
    },
    {
      "module": "module.node_2",
      "mode": "managed",
      "type": "libvirt_domain",
      "name": "resource_domain",
      "provider": "module.node_2.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "arch": "x86_64",
            "autostart": null,
            "boot_device": [],
            "cloudinit": "/libvirt-images/node_2_pool/commoninit.iso;160b2b9f-98df-4563-b909-af808edd50b7",
            "cmdline": null,
            "console": [
              {
                "source_host": "127.0.0.1",
                "source_path": "",
                "source_service": "0",
                "target_port": "0",
                "target_type": "serial",
                "type": "pty"
              }
            ],
            "coreos_ignition": null,
            "cpu": [],
            "description": "",
            "disk": [
              {
                "block_device": "",
                "file": "",
                "scsi": false,
                "url": "",
                "volume_id": "/libvirt-images/node_2_pool/node_2_image.qcow2",
                "wwn": ""
              }
            ],
            "emulator": "/usr/bin/qemu-system-x86_64",
            "filesystem": [],
            "firmware": "",
            "fw_cfg_name": "opt/com.coreos/config",
            "graphics": [
              {
                "autoport": true,
                "listen_address": "127.0.0.1",
                "listen_type": "address",
                "type": "spice",
                "websocket": 0
              }
            ],
            "id": "ca2fe2c6-d813-4174-8015-568cdf8ef4b9",
            "initrd": "",
            "kernel": "",
            "machine": "pc",
            "memory": 1024,
            "metadata": null,
            "name": "node_2_domain",
            "network_interface": [
              {
                "addresses": [],
                "bridge": "",
                "hostname": "",
                "mac": "52:54:00:6C:3C:04",
                "macvtap": "",
                "network_id": "099dcc7e-822e-440f-9e8a-d7c4902d7e1b",
                "network_name": "network_1",
                "passthrough": "",
                "vepa": "",
                "wait_for_lease": false
              }
            ],
            "nvram": [],
            "qemu_agent": false,
            "running": true,
            "timeouts": null,
            "tpm": [],
            "vcpu": 1,
            "video": [],
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjozMDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.node_2.data.template_file.data_cloudinit",
            "module.node_2.libvirt_cloudinit_disk.resource_disk",
            "module.node_2.libvirt_pool.resource_pool",
            "module.node_2.libvirt_volume.resource_image"
          ]
        }
      ]
    },
    {
      "module": "module.node_2",
      "mode": "managed",
      "type": "libvirt_pool",
      "name": "resource_pool",
      "provider": "module.node_2.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "allocation": 24601620480,
            "available": null,
            "capacity": 88387616768,
            "id": "ea6bce65-83e7-4cf1-97ac-d74622d00b38",
            "name": "node_2_pool",
            "path": "/libvirt-images/node_2_pool",
            "type": "dir",
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.node_2",
      "mode": "managed",
      "type": "libvirt_volume",
      "name": "resource_image",
      "provider": "module.node_2.provider[\"registry.terraform.io/dmacvicar/libvirt\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base_volume_id": null,
            "base_volume_name": null,
            "base_volume_pool": null,
            "format": "qcow2",
            "id": "/libvirt-images/node_2_pool/node_2_image.qcow2",
            "name": "node_2_image.qcow2",
            "pool": "node_2_pool",
            "size": 2147483648,
            "source": "modules/virtual-machine/../../downloads/debian-11-generic-amd64-20220911-1135.qcow2",
            "xml": []
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.node_2.libvirt_pool.resource_pool"
          ]
        }
      ]
    }
  ],
  "check_results": []
}
